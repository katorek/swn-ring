FIFO Channels

Known IDs in process:
    - PREVIOUS_PROC_ID
    - CURRENT_PROC_ID
======================


structure Message {
    initiator = CURRENT_PROC_ID
    seen_token = -1
    with_token = false
}

bool confirmationReceived = false
bool hasToken = false
int currentTokenID = 0
Mutex mtx;
=============================


sendMsg(ini, st, id, wt) {
    Message {
        initiator = ini
        seen_token = st
        token_id = id
        with_token = wt
    }
}

timeout() :
    wait some established time(...) //Need to be long enough to perform one loop, otherwise it can stack forever
    mtx.lock()
    if confirmationReceived :
        mtx.unlock()
    else :
        mtx.unlock()
        sendMsg(CURRENT_PROC_ID, -1, currentTokenID, false)
        ASYNC timeout()

=============================
event onMsgReceived(message) :
    if (message.with_token) :
        mtx.lock()
        confirmationReceived = true //turn off timeout, we have token
        mtx.unlock()
        hasToken = true
        if (PROC_NO_1) :
            currentTokenID = (currentTokenID + 1) mod PROC_COUNT
        else :
            currentTokenID = message.token_id
        sendMsg(message.initiator, CURRENT_PROC_ID, currentTokenID, false)
        GO_TO_CRITICAL_SECTION()
        mtx.lock()
        confirmationReceived = false
        mtx.unlock()
        ASYNC timeout()
        hasToken = false
        sendMsg(CURRENT_PROC_ID, -1, currentTokenID, true)
    else if ((message.initiator == CURRENT_PROC_ID) and (message.seen_token != -1)) :
        mtx.lock()
        confirmationReceived = true //turn off timeout, we received confirmation
        mtx.unlock()
    else if ((message.initiator == CURRENT_PROC_ID) and (message.seen_token == -1) and (currentTokenID == message.token_id)) :
        sendMsg(CURRENT_PROC_ID, -1, currentTokenID, true)
    else if (message.seen_token == -1) :
        if (hasToken) :
            sendMsg(message.initiator, CURRENT_PROC_ID, message.token_id, false)
        else :
            sendMsg(message.initiator, message.seen_token, message.token_id, false)
    else if (message.seen_token != -1) :
        sendMsg(message.initiator, message.seen_token, message.token_id, false)


=======================
listen :
    Wait until:
        message 
    